{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6f47f7e9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:03.968823Z",
     "iopub.status.busy": "2024-10-07T13:56:03.968399Z",
     "iopub.status.idle": "2024-10-07T13:56:05.161118Z",
     "shell.execute_reply": "2024-10-07T13:56:05.159438Z"
    },
    "papermill": {
     "duration": 1.204583,
     "end_time": "2024-10-07T13:56:05.164888",
     "exception": false,
     "start_time": "2024-10-07T13:56:03.960305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/international-football-results-from-1872-to-2017/goalscorers.csv\n",
      "/kaggle/input/international-football-results-from-1872-to-2017/shootouts.csv\n",
      "/kaggle/input/international-football-results-from-1872-to-2017/results.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61b586f1",
   "metadata": {
    "papermill": {
     "duration": 0.00552,
     "end_time": "2024-10-07T13:56:05.176402",
     "exception": false,
     "start_time": "2024-10-07T13:56:05.170882",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Project: Fitting markov models on a team's game results \n",
    "\n",
    "Markov models place transition probabilites between different states. In this case, the states for the outcome of a team's performance are :\n",
    "\n",
    "* win\n",
    "* loss\n",
    "* draw\n",
    "\n",
    "Markov models have short term memory and assume conditional independence, i.e. the result of the next game is conditionally independent of all previous games conditioned on the current game. This is a crude simplification and most likely a wrong assumption but we work with it to see what results we can get. \n",
    "\n",
    "# Fit a Markov Model to team England "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b204a1a",
   "metadata": {
    "papermill": {
     "duration": 0.005775,
     "end_time": "2024-10-07T13:56:05.187703",
     "exception": false,
     "start_time": "2024-10-07T13:56:05.181928",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "# 1. Read and clean the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7b10943",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:05.202424Z",
     "iopub.status.busy": "2024-10-07T13:56:05.201856Z",
     "iopub.status.idle": "2024-10-07T13:56:05.387755Z",
     "shell.execute_reply": "2024-10-07T13:56:05.386405Z"
    },
    "papermill": {
     "duration": 0.196339,
     "end_time": "2024-10-07T13:56:05.390381",
     "exception": false,
     "start_time": "2024-10-07T13:56:05.194042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>home_score</th>\n",
       "      <th>away_score</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1872-11-30</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1873-03-08</td>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1874-03-07</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1875-03-06</td>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1876-03-04</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date home_team away_team  home_score  away_score tournament     city  \\\n",
       "0  1872-11-30  Scotland   England           0           0   Friendly  Glasgow   \n",
       "1  1873-03-08   England  Scotland           4           2   Friendly   London   \n",
       "2  1874-03-07  Scotland   England           2           1   Friendly  Glasgow   \n",
       "3  1875-03-06   England  Scotland           2           2   Friendly   London   \n",
       "4  1876-03-04  Scotland   England           3           0   Friendly  Glasgow   \n",
       "\n",
       "    country  neutral  \n",
       "0  Scotland    False  \n",
       "1   England    False  \n",
       "2  Scotland    False  \n",
       "3   England    False  \n",
       "4  Scotland    False  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.read_csv('/kaggle/input/international-football-results-from-1872-to-2017/results.csv')\n",
    "results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc961264",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:05.404613Z",
     "iopub.status.busy": "2024-10-07T13:56:05.404213Z",
     "iopub.status.idle": "2024-10-07T13:56:05.411792Z",
     "shell.execute_reply": "2024-10-07T13:56:05.410709Z"
    },
    "papermill": {
     "duration": 0.017392,
     "end_time": "2024-10-07T13:56:05.414190",
     "exception": false,
     "start_time": "2024-10-07T13:56:05.396798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(47598, 9)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e0ae4c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:05.428440Z",
     "iopub.status.busy": "2024-10-07T13:56:05.427407Z",
     "iopub.status.idle": "2024-10-07T13:56:05.467763Z",
     "shell.execute_reply": "2024-10-07T13:56:05.466305Z"
    },
    "papermill": {
     "duration": 0.050047,
     "end_time": "2024-10-07T13:56:05.470305",
     "exception": false,
     "start_time": "2024-10-07T13:56:05.420258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 47598 entries, 0 to 47597\n",
      "Data columns (total 9 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   date        47598 non-null  object\n",
      " 1   home_team   47598 non-null  object\n",
      " 2   away_team   47598 non-null  object\n",
      " 3   home_score  47598 non-null  int64 \n",
      " 4   away_score  47598 non-null  int64 \n",
      " 5   tournament  47598 non-null  object\n",
      " 6   city        47598 non-null  object\n",
      " 7   country     47598 non-null  object\n",
      " 8   neutral     47598 non-null  bool  \n",
      "dtypes: bool(1), int64(2), object(6)\n",
      "memory usage: 3.0+ MB\n"
     ]
    }
   ],
   "source": [
    "results.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80221968",
   "metadata": {
    "papermill": {
     "duration": 0.005894,
     "end_time": "2024-10-07T13:56:05.483748",
     "exception": false,
     "start_time": "2024-10-07T13:56:05.477854",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Reshape into single team perspective i.e. two rows per game "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0428944c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:05.500702Z",
     "iopub.status.busy": "2024-10-07T13:56:05.500302Z",
     "iopub.status.idle": "2024-10-07T13:56:07.079480Z",
     "shell.execute_reply": "2024-10-07T13:56:07.077674Z"
    },
    "papermill": {
     "duration": 1.590747,
     "end_time": "2024-10-07T13:56:07.081996",
     "exception": false,
     "start_time": "2024-10-07T13:56:05.491249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(95196, 10)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "away_df = results[['away_team', 'home_team', 'date', 'away_score', 'home_score', 'tournament',\n",
    "                  'city', 'country', 'neutral']]\n",
    "home_df = results[['home_team', 'away_team', 'date', 'home_score', 'away_score', 'tournament',\n",
    "                  'city', 'country', 'neutral']]\n",
    "results_reshaped = pd.concat([home_df, away_df], axis = 0)\n",
    "## change the column names to reflect the new data perspective\n",
    "results_reshaped.columns = ['team', 'opponent','date', 'goals_scored', 'goals_conceded', 'tournament', 'city', 'country', 'neutral']\n",
    "## add team outcome\n",
    "results_reshaped['game_outcome'] = results_reshaped.apply(lambda row: 'win' if row['goals_scored'] > row['goals_conceded'] else ('lose' if row['goals_scored'] < row['goals_conceded'] else 'draw'), axis=1)\n",
    "## clean date \n",
    "results_reshaped['date'] = pd.to_datetime(results_reshaped['date'], format = '%Y-%m-%d')\n",
    "\n",
    "results_reshaped = results_reshaped.sort_values('date')\n",
    "results_reshaped.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "676fe2d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:07.099327Z",
     "iopub.status.busy": "2024-10-07T13:56:07.098939Z",
     "iopub.status.idle": "2024-10-07T13:56:07.115473Z",
     "shell.execute_reply": "2024-10-07T13:56:07.114267Z"
    },
    "papermill": {
     "duration": 0.027807,
     "end_time": "2024-10-07T13:56:07.118133",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.090326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>opponent</th>\n",
       "      <th>date</th>\n",
       "      <th>goals_scored</th>\n",
       "      <th>goals_conceded</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "      <th>game_outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>1872-11-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "      <td>draw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>1872-11-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "      <td>draw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>1873-03-08</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>1873-03-08</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>1874-03-07</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       team  opponent       date  goals_scored  goals_conceded tournament  \\\n",
       "0  Scotland   England 1872-11-30             0               0   Friendly   \n",
       "0  Scotland   England 1872-11-30             0               0   Friendly   \n",
       "1   England  Scotland 1873-03-08             4               2   Friendly   \n",
       "1   England  Scotland 1873-03-08             4               2   Friendly   \n",
       "2  Scotland   England 1874-03-07             2               1   Friendly   \n",
       "\n",
       "      city   country  neutral game_outcome  \n",
       "0  Glasgow  Scotland    False         draw  \n",
       "0  Glasgow  Scotland    False         draw  \n",
       "1   London   England    False          win  \n",
       "1   London   England    False          win  \n",
       "2  Glasgow  Scotland    False          win  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_reshaped.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be3b6a83",
   "metadata": {
    "papermill": {
     "duration": 0.007374,
     "end_time": "2024-10-07T13:56:07.132717",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.125343",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Get England data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b3fff5a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:07.149107Z",
     "iopub.status.busy": "2024-10-07T13:56:07.148474Z",
     "iopub.status.idle": "2024-10-07T13:56:07.179863Z",
     "shell.execute_reply": "2024-10-07T13:56:07.178675Z"
    },
    "papermill": {
     "duration": 0.042385,
     "end_time": "2024-10-07T13:56:07.182727",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.140342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Going back to 10-2019\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>opponent</th>\n",
       "      <th>date</th>\n",
       "      <th>goals_scored</th>\n",
       "      <th>goals_conceded</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "      <th>game_outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>43121</th>\n",
       "      <td>England</td>\n",
       "      <td>Montenegro</td>\n",
       "      <td>2019-11-14</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>UEFA Euro qualification</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43121</th>\n",
       "      <td>England</td>\n",
       "      <td>Montenegro</td>\n",
       "      <td>2019-11-14</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>UEFA Euro qualification</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43388</th>\n",
       "      <td>England</td>\n",
       "      <td>Wales</td>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43388</th>\n",
       "      <td>England</td>\n",
       "      <td>Wales</td>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43427</th>\n",
       "      <td>England</td>\n",
       "      <td>Belgium</td>\n",
       "      <td>2020-10-11</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>UEFA Nations League</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "      <td>win</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          team    opponent       date  goals_scored  goals_conceded  \\\n",
       "43121  England  Montenegro 2019-11-14             7               0   \n",
       "43121  England  Montenegro 2019-11-14             7               0   \n",
       "43388  England       Wales 2020-10-08             3               0   \n",
       "43388  England       Wales 2020-10-08             3               0   \n",
       "43427  England     Belgium 2020-10-11             2               1   \n",
       "\n",
       "                    tournament    city  country  neutral game_outcome  \n",
       "43121  UEFA Euro qualification  London  England    False          win  \n",
       "43121  UEFA Euro qualification  London  England    False          win  \n",
       "43388                 Friendly  London  England    False          win  \n",
       "43388                 Friendly  London  England    False          win  \n",
       "43427      UEFA Nations League  London  England    False          win  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def filter_team_time(df, country, years_back):\n",
    "    ## filter for time using pandas instead of datetime.datetime\n",
    "    current_date = pd.to_datetime('today')\n",
    "    start_date = current_date - pd.DateOffset(years=years_back)\n",
    "    print(f'Going back to {start_date.strftime(\"%m-%Y\")}')\n",
    "    filtered_df = df[df['date'] >= start_date]\n",
    "    ## filter for team \n",
    "    return filtered_df[filtered_df['team'] == country]\n",
    "\n",
    "england_results_reshaped = filter_team_time(results_reshaped, 'England', 5)\n",
    "\n",
    "## check\n",
    "england_results_reshaped.shape\n",
    "england_results_reshaped.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4958b6c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:07.205538Z",
     "iopub.status.busy": "2024-10-07T13:56:07.205100Z",
     "iopub.status.idle": "2024-10-07T13:56:07.530388Z",
     "shell.execute_reply": "2024-10-07T13:56:07.528928Z"
    },
    "papermill": {
     "duration": 0.343154,
     "end_time": "2024-10-07T13:56:07.533163",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.190009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='game_outcome'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "england_results_reshaped.game_outcome.value_counts().plot(kind = 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dba2fad",
   "metadata": {
    "papermill": {
     "duration": 0.00767,
     "end_time": "2024-10-07T13:56:07.549687",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.542017",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Check if data is already sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "14ee4bc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:07.565705Z",
     "iopub.status.busy": "2024-10-07T13:56:07.565273Z",
     "iopub.status.idle": "2024-10-07T13:56:07.588979Z",
     "shell.execute_reply": "2024-10-07T13:56:07.587725Z"
    },
    "papermill": {
     "duration": 0.035757,
     "end_time": "2024-10-07T13:56:07.592508",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.556751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>opponent</th>\n",
       "      <th>date</th>\n",
       "      <th>goals_scored</th>\n",
       "      <th>goals_conceded</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "      <th>game_outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>43121</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43121</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43388</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43388</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43427</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47372</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47390</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47390</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47579</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47579</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>82 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       team  opponent  date  goals_scored  goals_conceded  tournament  city  \\\n",
       "43121  True      True  True          True            True        True  True   \n",
       "43121  True      True  True          True            True        True  True   \n",
       "43388  True      True  True          True            True        True  True   \n",
       "43388  True      True  True          True            True        True  True   \n",
       "43427  True      True  True          True            True        True  True   \n",
       "...     ...       ...   ...           ...             ...         ...   ...   \n",
       "47372  True      True  True          True            True        True  True   \n",
       "47390  True      True  True          True            True        True  True   \n",
       "47390  True      True  True          True            True        True  True   \n",
       "47579  True      True  True          True            True        True  True   \n",
       "47579  True      True  True          True            True        True  True   \n",
       "\n",
       "       country  neutral  game_outcome  \n",
       "43121     True     True          True  \n",
       "43121     True     True          True  \n",
       "43388     True     True          True  \n",
       "43388     True     True          True  \n",
       "43427     True     True          True  \n",
       "...        ...      ...           ...  \n",
       "47372     True     True          True  \n",
       "47390     True     True          True  \n",
       "47390     True     True          True  \n",
       "47579     True     True          True  \n",
       "47579     True     True          True  \n",
       "\n",
       "[82 rows x 10 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "england_results_reshaped.sort_values('date') == england_results_reshaped"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93549b1a",
   "metadata": {
    "papermill": {
     "duration": 0.007674,
     "end_time": "2024-10-07T13:56:07.607593",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.599919",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Stickiness of match results - there is some momentum/ time dependency in the outcome of games for England. Notably they have winning streaks that span for many games"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2c081e0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:07.625065Z",
     "iopub.status.busy": "2024-10-07T13:56:07.624674Z",
     "iopub.status.idle": "2024-10-07T13:56:07.630250Z",
     "shell.execute_reply": "2024-10-07T13:56:07.628742Z"
    },
    "papermill": {
     "duration": 0.017371,
     "end_time": "2024-10-07T13:56:07.632833",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.615462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "england_results_reshaped\n",
    "england_matches = england_results_reshaped\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f1020b8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:07.652616Z",
     "iopub.status.busy": "2024-10-07T13:56:07.652241Z",
     "iopub.status.idle": "2024-10-07T13:56:08.078839Z",
     "shell.execute_reply": "2024-10-07T13:56:08.077307Z"
    },
    "papermill": {
     "duration": 0.44157,
     "end_time": "2024-10-07T13:56:08.082066",
     "exception": false,
     "start_time": "2024-10-07T13:56:07.640496",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "## plot one by one to allow each category to have its own colour\n",
    "for outcome, color in zip(['win', 'draw', 'lose'], ['green', 'yellow', 'red']):\n",
    "    subset = england_results_reshaped[england_results_reshaped['game_outcome'] == outcome]\n",
    "    plt.scatter(subset['date'], subset['game_outcome'], color=color, label=outcome, s=100)\n",
    "\n",
    "# Add line to connect points\n",
    "\n",
    "plt.plot(england_matches['date'], england_matches['game_outcome'], color='blue', alpha=0.3)\n",
    "\n",
    "plt.yticks([-1, 0, 1], ['Loss', 'Draw', 'Win'])\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Outcome')\n",
    "plt.title('England Recent 10 Games Outcomes')\n",
    "plt.legend(title='Outcome')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e5426d63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:08.107579Z",
     "iopub.status.busy": "2024-10-07T13:56:08.107036Z",
     "iopub.status.idle": "2024-10-07T13:56:08.143346Z",
     "shell.execute_reply": "2024-10-07T13:56:08.142081Z"
    },
    "papermill": {
     "duration": 0.050713,
     "end_time": "2024-10-07T13:56:08.147216",
     "exception": false,
     "start_time": "2024-10-07T13:56:08.096503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transition Matrix:\n",
      "           win      draw      lose\n",
      "win   0.811321  0.113208  0.075472\n",
      "draw  0.444444  0.500000  0.055556\n",
      "lose  0.200000  0.300000  0.500000\n"
     ]
    }
   ],
   "source": [
    "## sorted outcomes\n",
    "outcomes = england_results_reshaped.game_outcome.tolist()\n",
    "\n",
    "# Create transition matrix\n",
    "states = ['win', 'draw', 'lose']\n",
    "transition_matrix = pd.DataFrame(index=states, columns=states, data=0)\n",
    "\n",
    "# Populate the transition matrix\n",
    "for (i, j) in zip(outcomes[:-1], outcomes[1:]):\n",
    "    transition_matrix.loc[i, j] += 1\n",
    "\n",
    "# Convert counts to probabilities\n",
    "transition_matrix = transition_matrix.div(transition_matrix.sum(axis=1), axis=0)\n",
    "transition_matrix.fillna(0, inplace=True)\n",
    "\n",
    "print(\"Transition Matrix:\")\n",
    "print(transition_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "80665c09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:08.168776Z",
     "iopub.status.busy": "2024-10-07T13:56:08.168259Z",
     "iopub.status.idle": "2024-10-07T13:56:10.247795Z",
     "shell.execute_reply": "2024-10-07T13:56:10.246640Z"
    },
    "papermill": {
     "duration": 2.093312,
     "end_time": "2024-10-07T13:56:10.250819",
     "exception": false,
     "start_time": "2024-10-07T13:56:08.157507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAoUAAAIjCAYAAAB1bGEnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABobUlEQVR4nO3deVhU5f//8dewb7KJgluguOFuuG9gmWuW2eKSG5mWZVbU55NWamqJllufsjRTc+ubLZal5hKK5Zal5lKGu+YC4gYICsqc3x/+nJoAZdBxUJ6P6zrX5dxzn3Pes4Bv3ue+72MyDMMQAAAAijUnRwcAAAAAxyMpBAAAAEkhAAAASAoBAAAgkkIAAACIpBAAAAAiKQQAAIBICgEAACCSQgAAAIikEHeYTz75RCaTSYcOHbpu34SEBJlMJiUkJNg9Lke5+n78+uuvN+2Y0dHRqlWr1nX7HTp0SCaTSZ988oml7Y033pDJZLLqFxYWpn79+t20+G430dHRio6OvmnHO3/+vJ588kmFhITIZDLphRdeuGnHLmry+j7dKrb8rgFuFySFyJfJZCrQVtSTqg8++MAqMSkKoqOjrd7DwMBANWzYULNmzZLZbHZ0eA71xx9/6I033rjp/9n269dPJpNJvr6+unDhQq7n9+7da/k8JkyYYPPxjx8/rjfeeEO//fbbTYi28MaOHatPPvlEgwYN0rx589S7d2+7ni8sLCzf3w3t27e367kB3Fwujg4ARde8efOsHs+dO1erVq3K1R4REXErw7qm3r17q3v37nJ3d7e0ffDBBwoKCspVjWrVqpUuXLggNze3WxzlFeXLl1dcXJwkKSUlRXPnzlX//v21Z88ejRs3ziEx3UyhoaG6cOGCXF1dr9kvMTFRTk5//336xx9/aNSoUYqOjlZYWNhNjcnFxUWZmZn67rvv9Nhjj1k9t2DBAnl4eOjixYuFOvbx48c1atQohYWFqV69egXeb+XKlYU6X35Wr16tJk2aaOTIkTf1uNdSr149vfTSS7nay5Yte8tiAHDjSAqRr169elk93rRpk1atWpWr/d8yMzPl5eVlz9Dy5ezsLGdn5wL1dXJykoeHh50jyp+fn5/Ve/nUU0+pWrVqev/99zVmzJg8kymz2azs7GyHxl1QJpOpQHH+M4G3N3d3dzVv3lz/93//lysp/PTTT9WpUyd99dVXtySWqz8nN/uPkpMnT6pGjRo37XiXL1+W2Wy+ZpzlypW77u8FAEUfl49xQ66OL9uyZYtatWolLy8vvfrqq5KkxYsXq1OnTipbtqzc3d0VHh6uMWPGKCcnJ89j/PHHH2rdurW8vLxUrlw5vf3227nO995776lmzZry8vJSQECAGjRooE8//dTy/L/H+YSFhen333/X2rVrLZe0ro7fym9M4RdffKHIyEh5enoqKChIvXr10rFjx6z69OvXTz4+Pjp27Ji6dOkiHx8flSpVSi+//HKu11dQXl5eatKkiTIyMpSSkiLpSmI1ePBgLViwQDVr1pS7u7uWL18uSdq2bZs6dOggX19f+fj46N5779WmTZvyPHZmZqaeeuoplSxZUr6+vurTp4/Onj1r1aegn9dVW7ZsUbNmzeTp6amKFStq2rRpVs/nNaYwL/8cU/jJJ5/o0UcflSS1bt3aaohC3759FRQUpEuXLuU6Rtu2bVWtWrVrnueqnj176vvvv9e5c+csbb/88ov27t2rnj175up/5swZvfzyy6pdu7Z8fHzk6+urDh06aPv27ZY+CQkJatiwoSQpJibGEvfV136tn5N/jyns27evPDw8tHv3bqs42rVrp4CAAB0/fjzP13X1+3zw4EEtXbrUEsPVn4WTJ0+qf//+Cg4OloeHh+rWras5c+ZYHePqZzZhwgRNmTJF4eHhcnd31x9//FGg9/ZabPmZOX36tHr37i1fX1/5+/urb9++2r59e4G+T7Nnz9Y999yj0qVLy93dXTVq1NCHH36Yq19YWJjuv/9+rVu3To0aNZKHh4cqVaqkuXPn5ur7+++/65577pGnp6fKly+vN998s9gP88CdiUohbtjp06fVoUMHde/eXb169VJwcLCkK//B+/j4KDY2Vj4+Plq9erVGjBihtLQ0vfPOO1bHOHv2rNq3b6+uXbvqscce05dffqlXXnlFtWvXVocOHSRJM2bM0JAhQ/TII4/o+eef18WLF7Vjxw79/PPPef5nLklTpkzRc889Jx8fH7322muSZIkvL5988oliYmLUsGFDxcXFKTk5We+++67Wr1+vbdu2yd/f39I3JydH7dq1U+PGjTVhwgT98MMPmjhxosLDwzVo0KBCvZcHDhyQs7Oz1XlWr16tzz//XIMHD1ZQUJAl0W3ZsqV8fX313//+V66urpo+fbqio6O1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smVVpUqVPPcNCwtTiRIlLI/LlCmjkydP3qrQcZvbv3+/srOz1bhxY0tbYGCgqlWrZtWvQYMGufZduHChmjdvrpCQEPn4+Oj111/XkSNHLM9HRUVp3bp1ysnJsVS7o6OjlZCQoOPHj2vfvn35VsCBf9u9e7dcXFysvqslS5ZUtWrVtHv3bknSkCFD9Oabb6p58+YaOXKkduzYYem7fft2rVmzRj4+PpatevXqkq78HABFDUlhMRUdHa1169Zp+/btcnV1VfXq1S3/eV7vEpurq6vVY5PJJLPZbO+QUcx4e3tbPd64caMef/xxdezYUUuWLNG2bdv02muvKTs729KnVatWSk9P19atW/Xjjz9aJYXX+2MHKIwnn3xSBw4cUO/evbVz5041aNBA7733niTp/Pnz6ty5s3777Terbe/evWrVqpWDIwdyIykspq6OK5w8ebIlAbz6n2dCQgLVFNhNeHi4XF1d9fPPP1vazp49e92ljzZs2KDQ0FC99tpratCggapUqaLDhw9b9fH391edOnX0/vvvW/7YadWqlbZt26YlS5YwnhA2iYiI0OXLl62+q6dPn1ZiYqJq1KhhaatQoYKefvppLVq0SC+99JJmzJghSbr77rv1+++/KywsTJUrV7ba/v1HD1AUkBQWUwEBAapTp44WLFhgSQBbtWqlrVu3as+ePfznCbvx8fFR//799Z///EerV6/Wrl271K9fPzk5XfvXUZUqVXTkyBF99tln2r9/v/73v//p66+/ztUvOjpaCxYssHyHAwMDFRERoYULF/K9hk2qVKmiBx98UAMGDLBcWenVq5fKlSunBx98UJL0wgsvaMWKFTp48KC2bt2qNWvWKCIiQtKVSShnzpxRjx499Msvv2j//v1asWKFYmJiLKs/AEUJSWExFhUVpZycHEtSGBgYqBo1aigkJCTX+C7gZnrnnXfUsmVLde7cWW3atFGLFi0UGRl5zX0eeOABvfjiixo8eLDq1aunDRs2WGYl/9O/v9fSlUTx321AQcyePVuRkZG6//771bRpUxmGoWXLllmG0eTk5OjZZ59VRESE2rdvr6pVq+qDDz6QJJUtW1br169XTk6O2rZtq9q1a+uFF16Qv7//df8IAhzBZBiG4eggAAAA4Fj8qQIAAACSQgAAAJAUAgAAQCSFAAAAEEkhAAAARFIIAAAAkRQCAABAJIUAAAAQSSEAAABEUgjgOvr16yeTyaRx48ZZtX/zzTcymUw39VxhYWGaMmXKdftt375dDzzwgEqXLi0PDw+FhYWpW7duOnnypCQpISFBJpNJ586ds+n8hw4dkslk0m+//WZ78ABwmyMpBHBdHh4eGj9+vM6ePevoUJSSkqJ7771XgYGBWrFihXbv3q3Zs2erbNmyysjIcHR4AHDbIikEcF1t2rRRSEiI4uLirtlv3bp1atmypTw9PVWhQgUNGTLEkqjNnTtXPj4+2rt3r6X/M888o+rVqyszM1PR0dE6fPiwXnzxRZlMpnyrkOvXr1dqaqo+/vhj1a9fXxUrVlTr1q01efJkVaxYUYcOHVLr1q0lSQEBATKZTOrXr58kafny5WrRooX8/f1VsmRJ3X///dq/f7/l2BUrVpQk1a9fXyaTSdHR0ZbnPv74Y0VERMjDw0PVq1fXBx98YPP7CABFGUkhgOtydnbW2LFj9d577+no0aN59tm/f7/at2+vhx9+WDt27NDChQu1bt06DR48WJLUp08fdezYUY8//rguX76spUuX6uOPP9aCBQvk5eWlRYsWqXz58ho9erROnDihEydO5HmekJAQXb58WV9//bUMw8j1fIUKFfTVV19JkhITE3XixAm9++67kqSMjAzFxsbq119/VXx8vJycnPTQQw/JbDZLkjZv3ixJ+uGHH3TixAktWrRIkrRgwQKNGDFCb731lnbv3q2xY8dq+PDhmjNnzg28qwBQxBgAcA19+/Y1HnzwQcMwDKNJkybGE088YRiGYXz99dfGP3+F9O/f3xg4cKDVvj/99JPh5ORkXLhwwTAMwzhz5oxRvnx5Y9CgQUZwcLDx1ltvWfUPDQ01Jk+efN2YXn31VcPFxcUIDAw02rdvb7z99ttGUlKS5fk1a9YYkoyzZ89e8zgpKSmGJGPnzp2GYRjGwYMHDUnGtm3brPqFh4cbn376qVXbmDFjjKZNm143VgC4XVApBFBg48eP15w5c7R79+5cz23fvl2ffPKJfHx8LFu7du1kNpt18OBBSVcu586cOVMffvihwsPDNXTo0ELF8dZbbykpKUnTpk1TzZo1NW3aNFWvXl07d+685n579+5Vjx49VKlSJfn6+iosLEySdOTIkXz3ycjI0P79+9W/f3+r1/bmm29aXXoGgNudi6MDAHD7aNWqldq1a6dhw4ZZxulddf78eT311FMaMmRIrv3uuusuy79//PFHOTs768SJE8rIyFCJEiUKFUvJkiX16KOP6tFHH9XYsWNVv359TZgw4ZqXdDt37qzQ0FDNmDFDZcuWldlsVq1atZSdnZ3vPufPn5ckzZgxQ40bN7Z6ztnZuVCxA0BRRFIIwCbjxo1TvXr1VK1aNav2u+++W3/88YcqV66c774bNmzQ+PHj9d133+mVV17R4MGDrZI4Nzc35eTk2ByTm5ubwsPDLZNa3NzcJMnqWKdPn1ZiYqJmzJihli1bSroyMebfx/n3fsHBwSpbtqwOHDigxx9/3ObYAOB2QVIIwCa1a9fW448/rv/9739W7a+88oqaNGmiwYMH68knn5S3t7f++OMPrVq1Su+//77S09PVu3dvDRkyRB06dFD58uXVsGFDde7cWY888oikK+sU/vjjj+revbvc3d0VFBSU6/xLlizRZ599pu7du6tq1aoyDEPfffedli1bptmzZ0uSQkNDZTKZtGTJEnXs2FGenp4KCAhQyZIl9dFHH6lMmTI6cuRIrsvXpUuXlqenp5YvX67y5cvLw8NDfn5+GjVqlIYMGSI/Pz+1b99eWVlZ+vXXX3X27FnFxsba6Z0GgFvM0YMaARRt/5xoctXBgwcNNzc349+/QjZv3mzcd999ho+Pj+Ht7W3UqVPHMpkkJibGqF27tnHx4kVL/4kTJxqBgYHG0aNHDcMwjI0bNxp16tQx3N3dcx37qv379xsDBgwwqlatanh6ehr+/v5Gw4YNjdmzZ1v1Gz16tBESEmKYTCajb9++hmEYxqpVq4yIiAjD3d3dqFOnjpGQkGBIMr7++mvLfjNmzDAqVKhgODk5GVFRUZb2BQsWGPXq1TPc3NyMgIAAo1WrVsaiRYtseCcBoGgzGUYeazoAAACgWGH2MQAAAEgKAQAAQFIIAAAAkRQCAABAJIUAAAAQSSEAAABEUggAAACRFAIAAEAkhQAAABBJIQAAAERSCAAAAEn/D2gPqq0Z9dtgAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(transition_matrix, annot=True, cmap=\"coolwarm\", cbar=True, linewidths=.5)\n",
    "plt.title('Transition Probability Matrix for England')\n",
    "plt.xlabel('Next State')\n",
    "plt.ylabel('Current State')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6a698b1",
   "metadata": {
    "papermill": {
     "duration": 0.008769,
     "end_time": "2024-10-07T13:56:10.269429",
     "exception": false,
     "start_time": "2024-10-07T13:56:10.260660",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "From this calculations, \n",
    "* when England wins, they are very likely to win again. \n",
    "* when England draws, this becomes less certain. It is quite equally split between another draw or a win\n",
    "* when England loses, there is a fairly high chance of another loss, but significant chances of bounding back to a win or a draw. \n",
    "\n",
    "The obvious issue here is that \n",
    "* doesn't take into account other factors i.e. predictors such as opposition strength, home or away, etc\n",
    "* weighs all games equally (no time dependent weighing, i.e. weigh recent games more highly)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59a153e8",
   "metadata": {
    "papermill": {
     "duration": 0.008941,
     "end_time": "2024-10-07T13:56:10.288029",
     "exception": false,
     "start_time": "2024-10-07T13:56:10.279088",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Predicting outcomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "04c0b20c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-07T13:56:10.307357Z",
     "iopub.status.busy": "2024-10-07T13:56:10.306886Z",
     "iopub.status.idle": "2024-10-07T13:56:11.847478Z",
     "shell.execute_reply": "2024-10-07T13:56:11.846309Z"
    },
    "papermill": {
     "duration": 1.553388,
     "end_time": "2024-10-07T13:56:11.850310",
     "exception": false,
     "start_time": "2024-10-07T13:56:10.296922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import lightgbm as lgb\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ac37cd5",
   "metadata": {
    "papermill": {
     "duration": 0.008728,
     "end_time": "2024-10-07T13:56:11.868052",
     "exception": false,
     "start_time": "2024-10-07T13:56:11.859324",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1. Oridnal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13c5154e",
   "metadata": {
    "papermill": {
     "duration": 0.008888,
     "end_time": "2024-10-07T13:56:11.885785",
     "exception": false,
     "start_time": "2024-10-07T13:56:11.876897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9578422,
     "datasetId": 4305,
     "sourceId": 9377915,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.375993,
   "end_time": "2024-10-07T13:56:12.617592",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-07T13:56:00.241599",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
